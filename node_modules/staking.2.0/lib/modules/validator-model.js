"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidatorModel = void 0;

var _mobx = require("mobx");

var _bn = _interopRequireDefault(require("bn.js"));

var _stakingAccountModel = require("./staking-account-model.js");

var _utils = require("./utils");

var _rewardsStore = require("./rewards-store");

var solanaWeb3 = _interopRequireWildcard(require("@velas/web3"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ValidatorModel = /*#__PURE__*/function () {
  function ValidatorModel(solanaValidator, isDelinquent, connection, network) {
    _classCallCheck(this, ValidatorModel);

    _defineProperty(this, "status", 'active');

    _defineProperty(this, "activeStakeIsLoading", false);

    _defineProperty(this, "solanaValidator", null);

    _defineProperty(this, "stakingAccounts", []);

    _defineProperty(this, "totalStakers", null);

    _defineProperty(this, "network", null);

    _defineProperty(this, "apr$", null);

    _defineProperty(this, "name", '');

    if (!solanaValidator || !solanaValidator.votePubkey) {
      throw new Error('solanaValidator invalid');
    }

    if (typeof isDelinquent !== 'boolean') {
      throw new Error('isDelinquent bool required');
    }

    if (isDelinquent) {
      this.status = 'inactive';
    }

    this.connection = connection;
    this.solanaValidator = solanaValidator;
    this.network = network;
    this.activeStakeIsLoading = false;
    (0, _mobx.decorate)(this, {
      solanaValidator: _mobx.observable,
      status: _mobx.observable,
      totalStakers: _mobx.observable,
      apr$: _mobx.observable,
      activeStakeIsLoading: _mobx.observable
    });
    this.loadApr();
    this.loadAccountStats();
  }

  _createClass(ValidatorModel, [{
    key: "address",
    get: function get() {
      return this.solanaValidator.votePubkey;
    }
  }, {
    key: "identity",
    get: function get() {
      return this.solanaValidator.nodePubkey;
    }
  }, {
    key: "lastBlock",
    get: function get() {
      return this.solanaValidator.lastVote;
    }
  }, {
    key: "totalStakers",
    get: function get() {
      return this.solanaValidator.totalStakers;
    }
  }, {
    key: "activeStake",
    get: function get() {
      return new _bn.default(this.solanaValidator.activatedStake + '', 10);
    }
  }, {
    key: "myStake",
    get: function get() {
      var myStake = new _bn.default(0);

      for (var i = 0; i < this.stakingAccounts.length; i++) {
        var account = this.stakingAccounts[i];
        myStake = myStake.add(account.myStake);
      }

      return myStake;
    }
  }, {
    key: "apr",
    get: function get() {
      return this.apr$;
    }
  }, {
    key: "loadApr",
    value: function loadApr() {
      var _this = this;

      console.log('[loadApr]');

      _rewardsStore.rewardsStore.getLatestRewardsOfVaildator(this.address, function (rewards) {
        if (!rewards) {
          _this.apr$ = null;
        }

        if (rewards.length === 0) {
          _this.apr$ = 0;
        } else {
          _this.apr$ = rewards[0].apr;
        }
      });
    }
  }, {
    key: "commission",
    get: function get() {
      return this.solanaValidator.commission;
    }
  }, {
    key: "rewards",
    get: function get() {
      var rewards = new Map();

      var _iterator = _createForOfIteratorHelper(this.stakingAccounts),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var acc = _step.value;

          if (acc.rewards === null) {
            return null;
          }

          var _iterator2 = _createForOfIteratorHelper(acc.rewards),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var reward = _step2.value;
              if (!reward.amount) continue;

              if (!rewards.has(reward.epoch)) {
                rewards.set(reward.epoch, {
                  epoch: reward.epoch,
                  amount: reward.amount,
                  apr: reward.apr || 0,
                  postBalance: reward.solanaReward ? reward.solanaReward.postBalance : 0
                });
                continue;
              }

              var prev = rewards.get(reward.epoch);

              if (reward.apr && reward.solanaReward) {
                var postBalance = reward.solanaReward.postBalance + prev.postBalance;
                rewards.set(reward.epoch, {
                  epoch: reward.epoch,
                  amount: prev.amount.add(reward.amount),
                  apr: (prev.apr * prev.postBalance + reward.apr * reward.solanaReward.postBalance) / postBalance,
                  postBalance: postBalance
                });
                continue;
              }

              if (prev) {
                rewards.set(reward.epoch, {
                  epoch: reward.epoch,
                  amount: prev.amount.add(reward.amount),
                  apr: prev.apr,
                  postBalance: prev.postBalance
                });
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return Array.from(rewards.values()).sort(function (a, b) {
        return b.epoch - a.epoch;
      });
    }
  }, {
    key: "activeStakeIsLoading",
    get: function get() {
      var _iterator3 = _createForOfIteratorHelper(this.stakingAccounts),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var acc = _step3.value;
          console.log({
            acc: acc
          });

          if (acc.activeStakeIsLoading) {
            return true;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return false;
    }
  }, {
    key: "isRewardsLoading",
    get: function get() {
      var _iterator4 = _createForOfIteratorHelper(this.stakingAccounts),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var acc = _step4.value;

          if (acc.isRewardsLoading) {
            return true;
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return false;
    }
  }, {
    key: "totalActiveStake",
    get: function get() {
      var total = new _bn.default(0);

      var _iterator5 = _createForOfIteratorHelper(this.stakingAccounts),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var acc = _step5.value;

          if (!acc.state) {
            return null;
          }

          if (acc.state !== 'activating' && acc.state !== 'active') {
            continue;
          }

          total = total.add(acc.activeStake);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      return total;
    }
  }, {
    key: "totalAvailableForWithdrawRequestStake",
    get: function get() {
      var total = new _bn.default(0);

      var _iterator6 = _createForOfIteratorHelper(this.stakingAccounts),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var acc = _step6.value;

          if (!acc.state) {
            return null;
          }

          if (acc.state !== 'activating' && acc.state !== 'active') {
            continue;
          }

          if (acc.parsedAccoount.account.data.parsed.info.meta.lockup) {
            var unixTimestamp = acc.parsedAccoount.account.data.parsed.info.meta.lockup.unixTimestamp;
            var now = Date.now() / 1000;
            if (unixTimestamp > now) continue;
          }

          total = total.add(acc.activeStake).add(acc.inactiveStake);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      return total;
    }
  }, {
    key: "totalInactiveStake",
    get: function get() {
      var total = new _bn.default(0);

      var _iterator7 = _createForOfIteratorHelper(this.stakingAccounts),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var acc = _step7.value;

          if (!acc.state) {
            return null;
          }

          total = total.add(acc.inactiveStake);
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      return total;
    }
  }, {
    key: "totalActivatingStake",
    get: function get() {
      var total = new _bn.default(0);

      var _iterator8 = _createForOfIteratorHelper(this.stakingAccounts),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var acc = _step8.value;

          if (!acc.state) {
            return null;
          }

          if (acc.state !== 'activating') {
            continue;
          }

          if (!acc.activeStake) {
            return null;
          }

          total = total.add(acc.activeStake);
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }

      return total;
    }
  }, {
    key: "totalDeactivatingStake",
    get: function get() {
      var total = new _bn.default(0);

      var _iterator9 = _createForOfIteratorHelper(this.stakingAccounts),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var acc = _step9.value;

          if (!acc.state) {
            return null;
          }

          if (acc.state !== 'deactivating') {
            continue;
          }

          if (acc.activeStake === null) {
            return null;
          }

          total = total.add(acc.activeStake);
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }

      return total;
    }
  }, {
    key: "totalWithdrawRequested",
    get: function get() {
      var total = new _bn.default(0);

      var _iterator10 = _createForOfIteratorHelper(this.stakingAccounts),
          _step10;

      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var acc = _step10.value;

          if (!acc.state) {
            return null;
          }

          if (acc.state !== 'deactivating') {
            continue;
          }

          if (!acc.activeStake) {
            return null;
          }

          if (acc.parsedAccoount.account.data.parsed.info.meta.lockup) {
            var unixTimestamp = acc.parsedAccoount.account.data.parsed.info.meta.lockup.unixTimestamp;
            var now = Date.now() / 1000;
            if (unixTimestamp > now) continue;
          }

          total = total.add(acc.activeStake);
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }

      return total;
    }
  }, {
    key: "availableWithdrawRequested",
    get: function get() {
      var totalInactive = new _bn.default(0);

      var _iterator11 = _createForOfIteratorHelper(this.stakingAccounts),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var acc = _step11.value;

          if (!acc.state) {
            return null;
          }

          if (acc.state !== 'inactive' && acc.state !== 'deactivating') {
            continue;
          }

          if (!acc.inactiveStake) {
            return null;
          }

          if (acc.parsedAccoount.account.data.parsed.info.meta.lockup) {
            var unixTimestamp = acc.parsedAccoount.account.data.parsed.info.meta.lockup.unixTimestamp;
            var now = Date.now() / 1000;
            if (unixTimestamp > now) continue;
          }

          totalInactive = totalInactive.add(acc.inactiveStake);
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }

      return totalInactive;
    }
  }, {
    key: "loadMoreRewards",
    value: function loadMoreRewards() {
      return Promise.all(this.stakingAccounts.map(function (acc) {
        return acc.loadMoreRewards();
      }));
    }
  }, {
    key: "loadAccountStats",
    value: function () {
      var _loadAccountStats = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _this2 = this;

        var nativeAccounts;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                console.log("[loadAccountStats] start");
                _context.next = 3;
                return (0, _utils.cachedCallWithRetries)(this.network, ['getParsedProgramAccounts', this.connection, solanaWeb3.StakeProgram.programId.toString()], function () {
                  return _this2.connection.getParsedProgramAccounts(solanaWeb3.StakeProgram.programId);
                });

              case 3:
                nativeAccounts = _context.sent;
                this.totalStakers = nativeAccounts.filter(function (_ref) {
                  var account = _ref.account;

                  if (!account || !account.data.parsed.info || !account.data.parsed.info.stake) {
                    return false;
                  }

                  var voter = account.data.parsed.info.stake.delegation.voter;
                  return voter === _this2.address;
                }).length;
                console.log("[loadAccountStats] end");

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function loadAccountStats() {
        return _loadAccountStats.apply(this, arguments);
      }

      return loadAccountStats;
    }()
  }, {
    key: "updateValidator",
    value: function updateValidator(solanaValidator, isDelinquent) {
      if (!solanaValidator || !solanaValidator.votePubkey) {
        throw new Error('solanaValidator invalid');
      }

      if (typeof isDelinquent !== 'boolean') {
        throw new Error('isDelinquent bool required');
      }

      this.solanaValidator = solanaValidator;

      if (isDelinquent) {
        this.status = 'inactive';
      } else {
        this.status = 'active';
      }
    }
  }, {
    key: "addStakingAccount",
    value: function addStakingAccount(stakingAccount) {
      if (!stakingAccount || !(stakingAccount instanceof _stakingAccountModel.StakingAccountModel)) {
        throw new Error('stakingAccount invalid');
      }

      this.stakingAccounts.push(stakingAccount);
    }
  }]);

  return ValidatorModel;
}();

exports.ValidatorModel = ValidatorModel;