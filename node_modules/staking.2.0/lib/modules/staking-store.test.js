"use strict";

var _mobx = _interopRequireDefault(require("mobx"));

var _bn = _interopRequireDefault(require("bn.js"));

var _process = _interopRequireDefault(require("process"));

var _stakingStore = require("./staking-store.js");

var _isomorphicWebcrypto = _interopRequireDefault(require("isomorphic-webcrypto"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

global.crypto = _isomorphicWebcrypto.default;
var when = _mobx.default.when;

function main() {
  return _main.apply(this, arguments);
} // process.on('unhandledRejection', (reason, promise) => {
//     console.log(reason)
// })
// process.on('uncaughtException', (reason) => {
//     console.log(reason)
// })
// process.on('beforeExit', (code) => {
//   console.log('Process beforeExit event with code: ', code);
// });
//
// process.on('exit', (code) => {
//   console.log('Process exit event with code: ', code);
// });


function _main() {
  _main = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var store, searchStake, acc;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            store = new _stakingStore.StakingStore('https://api.velas.com', Buffer.from([65, 87, 4, 128, 34, 253, 218, 182, 113, 17, 153, 217, 86, 212, 89, 235, 181, 151, 54, 250, 195, 146, 157, 104, 100, 227, 247, 119, 126, 192, 200, 28, 140, 76, 72, 237, 33, 55, 72, 35, 172, 244, 48, 2, 220, 38, 158, 160, 220, 241, 240, 66, 94, 36, 92, 241, 249, 241, 43, 62, 140, 117, 12, 228]), 'ASfYaQ5xGT6oXaDdoBJGBkERAH4LsP9jjrokcnT9tRzb');
            _context.next = 4;
            return when(function () {
              return !store.isRefreshing;
            });

          case 4:
            console.log(store.getStakedValidators().length);
            console.log(store.getNotStakedValidators().length);
            _context.t0 = console;
            _context.next = 9;
            return store.stake('HJTuBeLvvcnC9aNLwcWDq5k83wmPEHo5z4xDHK1pid6f', '1000000000');

          case 9:
            _context.t1 = _context.sent;

            _context.t0.log.call(_context.t0, _context.t1);

            console.log('Stake done');
            _context.next = 14;
            return when(function () {
              return !store.isRefreshing;
            });

          case 14:
            console.log('Refresh done');
            searchStake = new _bn.default('1000000000', 10).add(store.rent);
            acc = store.accounts.find(function (account) {
              return account.myStake.eq(searchStake);
            });

            if (acc) {
              _context.next = 20;
              break;
            }

            console.error('Account not found');
            return _context.abrupt("return");

          case 20:
            console.log('Found acc');
            _context.t2 = console;
            _context.next = 24;
            return store.splitStakeAccount(acc, '500000001');

          case 24:
            _context.t3 = _context.sent;

            _context.t2.log.call(_context.t2, 'Split done', _context.t3);

            _context.next = 31;
            break;

          case 28:
            _context.prev = 28;
            _context.t4 = _context["catch"](0);
            console.error(_context.t4);

          case 31:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 28]]);
  }));
  return _main.apply(this, arguments);
}

main();