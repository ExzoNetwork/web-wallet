"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ManyKeysMap = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var nullKey = Symbol('null'); // `objectHashes` key for null

var keyCounter = 0;

var ManyKeysMap = /*#__PURE__*/function (_Map, _Symbol$toStringTag) {
  _inherits(ManyKeysMap, _Map);

  var _super = _createSuper(ManyKeysMap);

  function ManyKeysMap() {
    var _this;

    _classCallCheck(this, ManyKeysMap);

    _this = _super.call(this);
    _this._objectHashes = new WeakMap();
    _this._symbolHashes = new Map(); // https://github.com/tc39/ecma262/issues/1194

    _this._publicKeys = new Map(); // eslint-disable-next-line prefer-rest-params

    var _arguments = Array.prototype.slice.call(arguments),
        pairs = _arguments[0]; // Map compat


    if (pairs === null || pairs === undefined) {
      return _possibleConstructorReturn(_this);
    }

    if (typeof pairs[Symbol.iterator] !== 'function') {
      throw new TypeError(_typeof(pairs) + ' is not iterable (cannot read property Symbol(Symbol.iterator))');
    }

    var _iterator = _createForOfIteratorHelper(pairs),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _step$value = _slicedToArray(_step.value, 2),
            keys = _step$value[0],
            value = _step$value[1];

        _this.set(keys, value);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return _this;
  }

  _createClass(ManyKeysMap, [{
    key: "_getPublicKeys",
    value: function _getPublicKeys(keys) {
      var create = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (!Array.isArray(keys)) {
        throw new TypeError('The keys parameter must be an array');
      }

      var privateKey = this._getPrivateKey(keys, create);

      var publicKey;

      if (privateKey && this._publicKeys.has(privateKey)) {
        publicKey = this._publicKeys.get(privateKey);
      } else if (create) {
        publicKey = _toConsumableArray(keys); // Regenerate keys array to avoid external interaction

        this._publicKeys.set(privateKey, publicKey);
      }

      return {
        privateKey: privateKey,
        publicKey: publicKey
      };
    }
  }, {
    key: "_getPrivateKey",
    value: function _getPrivateKey(keys) {
      var create = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var privateKeys = [];

      var _iterator2 = _createForOfIteratorHelper(keys),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var key = _step2.value;

          if (key === null) {
            key = nullKey;
          }

          var hashes = _typeof(key) === 'object' || typeof key === 'function' ? '_objectHashes' : _typeof(key) === 'symbol' ? '_symbolHashes' : false;

          if (!hashes) {
            privateKeys.push(key);
          } else if (this[hashes].has(key)) {
            privateKeys.push(this[hashes].get(key));
          } else if (create) {
            var privateKey = "@@mkm-ref-".concat(keyCounter++, "@@");
            this[hashes].set(key, privateKey);
            privateKeys.push(privateKey);
          } else {
            return false;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return JSON.stringify(privateKeys);
    }
  }, {
    key: "set",
    value: function set(keys, value) {
      var _this$_getPublicKeys = this._getPublicKeys(keys, true),
          publicKey = _this$_getPublicKeys.publicKey;

      return _get(_getPrototypeOf(ManyKeysMap.prototype), "set", this).call(this, publicKey, value);
    }
  }, {
    key: "get",
    value: function get(keys) {
      var _this$_getPublicKeys2 = this._getPublicKeys(keys),
          publicKey = _this$_getPublicKeys2.publicKey;

      return _get(_getPrototypeOf(ManyKeysMap.prototype), "get", this).call(this, publicKey);
    }
  }, {
    key: "has",
    value: function has(keys) {
      var _this$_getPublicKeys3 = this._getPublicKeys(keys),
          publicKey = _this$_getPublicKeys3.publicKey;

      return _get(_getPrototypeOf(ManyKeysMap.prototype), "has", this).call(this, publicKey);
    }
  }, {
    key: "delete",
    value: function _delete(keys) {
      var _this$_getPublicKeys4 = this._getPublicKeys(keys),
          publicKey = _this$_getPublicKeys4.publicKey,
          privateKey = _this$_getPublicKeys4.privateKey;

      return Boolean(publicKey && _get(_getPrototypeOf(ManyKeysMap.prototype), "delete", this).call(this, publicKey) && this._publicKeys.delete(privateKey));
    }
  }, {
    key: "clear",
    value: function clear() {
      _get(_getPrototypeOf(ManyKeysMap.prototype), "clear", this).call(this);

      this._symbolHashes.clear();

      this._publicKeys.clear();
    }
  }, {
    key: _Symbol$toStringTag,
    get: function get() {
      return 'ManyKeysMap';
    }
  }, {
    key: "size",
    get: function get() {
      return _get(_getPrototypeOf(ManyKeysMap.prototype), "size", this);
    }
  }]);

  return ManyKeysMap;
}( /*#__PURE__*/_wrapNativeSuper(Map), Symbol.toStringTag);

exports.ManyKeysMap = ManyKeysMap;