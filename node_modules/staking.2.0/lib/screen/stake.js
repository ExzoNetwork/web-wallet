"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _formatValue = require("../format-value");

var _input = _interopRequireDefault(require("../input"));

var _header = _interopRequireDefault(require("../header"));

var _actionsContainer = _interopRequireDefault(require("../actionsContainer"));

var _notice = _interopRequireDefault(require("../notice"));

var _enterance = _interopRequireDefault(require("../enterance"));

var _buttonBlock = _interopRequireDefault(require("../buttonBlock"));

var _bn = _interopRequireDefault(require("bn.js"));

var _loader = _interopRequireDefault(require("../loader"));

var _Alert = _interopRequireDefault(require("@mui/material/Alert"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var Stake = function Stake(props) {
  var stakingStore = props.stakingStore,
      setShowStakeMore = props.setShowStakeMore,
      setShowDetails = props.setShowDetails,
      showStakeMore = props.showStakeMore;
  var validatorDetails = stakingStore.getValidatorDetails();
  var available_balance = validatorDetails ? validatorDetails.available_balance : '0';

  var _React$useState = _react.default.useState({
    amount: ''
  }),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      values = _React$useState2[0],
      setValues = _React$useState2[1];

  var _React$useState3 = _react.default.useState(false),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      showStakeActions = _React$useState4[0],
      setShowStakeActions = _React$useState4[1];

  var _React$useState5 = _react.default.useState(false),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      showStakingEnterance = _React$useState6[0],
      setShowStakingEnterance = _React$useState6[1];

  var _React$useState7 = _react.default.useState(false),
      _React$useState8 = _slicedToArray(_React$useState7, 2),
      stakingInProcess = _React$useState8[0],
      setStakingInProcess = _React$useState8[1];

  var _React$useState9 = _react.default.useState(null),
      _React$useState10 = _slicedToArray(_React$useState9, 2),
      stakingError = _React$useState10[0],
      setStakingError = _React$useState10[1];

  var nextDisabled = !values.amount || (0, _formatValue.amountToBN)(values.amount + "").gte(available_balance.sub(new _bn.default(1e9)));

  var backToStakeMore = function backToStakeMore() {
    setShowStakeActions(false);
    setShowStakeMore(true);
  };

  var goToStakingEnterance = function goToStakingEnterance() {
    setShowStakeActions(false);
    setShowStakingEnterance(true);
  };

  var backToStakeActions = function backToStakeActions() {
    setShowStakingEnterance(false);
    setShowStakeActions(true);
  };

  var backToDetailsFromStakeMore = function backToDetailsFromStakeMore() {
    setShowStakeMore(false);
    setShowDetails(true);
  };

  var goToDetailsFromEnterance = function goToDetailsFromEnterance() {
    setShowDetails(true);
    setShowStakingEnterance(false);
  };

  var handleChange = function handleChange(text) {
    setValues(_objectSpread(_objectSpread({}, values), {}, {
      amount: text
    }));
  };

  var goToActions = function goToActions() {
    if (validatorDetails && (!values.amount || parseFloat(values.amount) && (0, _formatValue.amountToBN)(values.amount).gte(available_balance.sub(new _bn.default(1e9))))) return null;
    setShowStakeMore(false);
    setShowStakeActions(true);
  };

  var confirm = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var amount, details, ADDRESS, result, errText;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (values.amount) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return", null);

            case 2:
              amount = new _bn.default(Math.floor(parseFloat(values.amount) * 1e9) + '', 10);
              setStakingInProcess(true);
              _context.prev = 4;
              details = stakingStore.getValidatorDetails();

              if (details) {
                _context.next = 9;
                break;
              }

              setStakingInProcess(false);
              return _context.abrupt("return", setStakingError("An error occurred. Please try again."));

            case 9:
              ADDRESS = details.address;
              _context.next = 12;
              return stakingStore.stake(ADDRESS, amount);

            case 12:
              result = _context.sent;
              console.log({
                result: result
              });

              if (!result.error) {
                _context.next = 21;
                break;
              }

              setStakingInProcess(false);
              errText = result.error.message || result.description || result.error;
              console.log("stakingStore.stake err:", result);
              setStakingError(errText.toString());
              setTimeout(function () {
                setStakingError(null);
              }, 3000);
              return _context.abrupt("return");

            case 21:
              goToStakingEnterance();
              _context.next = 29;
              break;

            case 24:
              _context.prev = 24;
              _context.t0 = _context["catch"](4);
              console.log("err", _context.t0);
              setStakingInProcess(false);
              setStakingError(_context.t0);

            case 29:
              setStakingInProcess(false);
              setValues({
                amount: ''
              });

            case 31:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[4, 24]]);
    }));

    return function confirm() {
      return _ref.apply(this, arguments);
    };
  }();

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_loader.default, {
    show: stakingInProcess,
    text: 'Staking in process...'
  }), showStakeMore && /*#__PURE__*/_react.default.createElement("div", {
    className: "staking stake-more index-width-container",
    style: styles.widthContainer
  }, /*#__PURE__*/_react.default.createElement(_header.default, {
    onClickBack: backToDetailsFromStakeMore
  }), /*#__PURE__*/_react.default.createElement(_input.default, {
    value: values.amount,
    onChange: function onChange(text) {
      return handleChange(text);
    },
    maxValue: available_balance
  }), (0, _formatValue.amountToBN)(values.amount + "").gte(available_balance.sub(new _bn.default(1e9))) && /*#__PURE__*/_react.default.createElement(_notice.default, {
    mt: 20,
    text: "Don't stake all coins, leave some (~1 VLX) to pay transaction fees in the future and be able to initiate stake withdrawals."
  }), /*#__PURE__*/_react.default.createElement(_buttonBlock.default, {
    text: "Next",
    onClickNext: goToActions,
    nextDisabled: nextDisabled
  })), showStakeActions && /*#__PURE__*/_react.default.createElement("div", {
    className: "staking index-width-container",
    style: styles.widthContainer
  }, stakingError && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_Alert.default, {
    onClose: function onClose() {
      setStakingError(null);
    },
    severity: "error",
    id: "error",
    style: styles.styleAlert
  }, stakingError.toString())), /*#__PURE__*/_react.default.createElement(_header.default, {
    onClickBack: backToStakeMore
  }), /*#__PURE__*/_react.default.createElement(_actionsContainer.default, {
    stakingStore: stakingStore,
    amountToConvert: values.amount
  }), /*#__PURE__*/_react.default.createElement(_notice.default, {
    text: "Staking rewards will be reinvested and added to the stake."
  }), /*#__PURE__*/_react.default.createElement(_buttonBlock.default, {
    text: "Confirm",
    onClickNext: confirm
  })), showStakingEnterance && /*#__PURE__*/_react.default.createElement("div", {
    className: "staking index-width-container",
    style: styles.widthContainer
  }, /*#__PURE__*/_react.default.createElement(_header.default, null), /*#__PURE__*/_react.default.createElement(_enterance.default, {
    enteranceImg: true,
    title: "Stake account has been created successfully",
    subtitle: "It is not fully active immediately, it may take multiple epochs to warm it up.",
    link: true
  }), /*#__PURE__*/_react.default.createElement(_buttonBlock.default, {
    text: "Ok",
    onClickNext: goToDetailsFromEnterance
  })));
};

var styles = {
  widthContainer: {
    width: 430
  },
  styleAlert: {
    position: "absolute",
    top: 0,
    right: 0,
    left: 0,
    zIndex: 99,
    padding: 10,
    borderRadius: 0
  }
};
var _default = Stake;
exports.default = _default;