"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Input = _interopRequireDefault(require("@mui/material/Input"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function isDigit(c) {
  return c >= '0' && c <= '9';
}

var InputAmount = /*#__PURE__*/function (_Component) {
  _inherits(InputAmount, _Component);

  var _super = _createSuper(InputAmount);

  function InputAmount() {
    var _this;

    _classCallCheck(this, InputAmount);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      selection: {
        start: 0,
        end: 0
      },
      value: "",
      fixSelection: null,
      skipOnChange: false
    });

    _defineProperty(_assertThisInitialized(_this), "inputRef", /*#__PURE__*/_react.default.createRef());

    _defineProperty(_assertThisInitialized(_this), "handleSelectionChange", function (e) {
      var selection = e.nativeEvent.selection;

      if (_this.state.fixSelection) {
        _this.setState({
          fixSelection: false
        });

        return;
      }

      _this.setState({
        selection: selection
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleTextChange", function (event) {
      var _event$nativeEvent;

      // console.log("[handleTextChange]", event?.nativeEvent?.target);
      if (!(event !== null && event !== void 0 && (_event$nativeEvent = event.nativeEvent) !== null && _event$nativeEvent !== void 0 && _event$nativeEvent.target)) return;
      var text = event.nativeEvent.target.value;

      if (_this.state.skipOnChange) {
        _this.setState({
          skipOnChange: false
        });

        return;
      }

      var text2 = [text.slice(0, _this.state.selection.end + 1), '|', text.slice(_this.state.selection.end + 1)].join('');
      var formatted = InputAmount.getFormattedValue(text2, _this.props.maxFractionLength);
      var newSelection = Math.max(0, formatted.indexOf("|"));
      var value = formatted.split('|').join('');

      _this.setState({
        value: value
      });

      if (text !== value) {
        var selection = {
          start: newSelection,
          end: newSelection
        };

        _this.setState({
          selection: selection,
          fixSelection: true
        });
      }

      _this.props.onChangeText && _this.props.onChangeText(_this.getNormalizedValue(value));
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyPress", function (event) {
      // console.log("[handleKeyPress]", event.nativeEvent.key);
      if (event.nativeEvent.key === ',') {
        var value = _this.state.value;
        var _this$state$selection = _this.state.selection,
            start = _this$state$selection.start,
            end = _this$state$selection.end;
        var newValue = [value.slice(0, _this.state.selection.start), '.', value.slice(_this.state.selection.end)].join('');

        _this.handleTextChange(newValue);

        _this.setState({
          skipOnChange: true
        });

        setTimeout(function () {
          _this.setState({
            skipOnChange: false
          });
        }, 1);
      }
    });

    return _this;
  }

  _createClass(InputAmount, [{
    key: "getNormalizedValue",
    value: function getNormalizedValue(value) {
      console.log("value", value);
      return value.split(',').join('').split('.', 2).join('.');
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react.default.createElement(_Input.default, {
        value: this.state.value,
        onKeyPress: this.handleKeyPress,
        onSelectionChange: this.handleSelectionChange,
        maxLength: this.props.maxLength,
        selectionColor: this.props.selectionColor,
        style: this.props.style,
        ref: this.inputRef,
        onChange: this.handleTextChange,
        placeholder: this.props.placeholder,
        autoComplete: "off",
        id: this.props.id,
        endAdornment: this.props.endAdornment
      });
    }
  }], [{
    key: "getFormattedValue",
    value: function getFormattedValue(value) {
      var maxFractionLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
      var parts = value.split('.', 2);
      var fraction = parts.length === 2 ? "." + parts[1] : "";
      var int = parts[0];
      var cnt = 0;

      for (var i = int.length - 1; i >= 0; i--) {
        if (cnt === 3 && int[i] === ',' && i > 0) {
          cnt = 0;
          continue;
        }

        if (cnt === 3 && isDigit(int[i])) {
          int = [int.slice(0, i + 1), int.slice(i + 1)].join(',');
          cnt = 1;
          continue;
        }

        if ((cnt !== 3 || i == 0) && int[i] === ',') {
          int = [int.slice(0, i), int.slice(i + 1)].join('');
          continue;
        }

        if (isDigit(int[i])) {
          cnt++;
          continue;
        }

        if (int[i] !== '|') {
          int = [int.slice(0, i), int.slice(i + 1)].join('');
          continue;
        }
      }

      while (int.split('|').join('').length > 1 && (int[0] === '0' || int[0] === ',')) {
        int = int.slice(1);
      }

      fraction = Array.from(fraction).filter(function (c) {
        return c === '.' || isDigit(c);
      }).join('').slice(0, maxFractionLength);
      return int + fraction;
    }
  }, {
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (state.value !== props.value) {
        if (typeof props.value !== 'string') {
          console.warn('Expected string value', props.value);
          return null;
        }

        return {
          value: InputAmount.getFormattedValue(props.value, props.maxFractionLength)
        };
      }

      return null;
    }
  }]);

  return InputAmount;
}(_react.Component);

exports.default = InputAmount;