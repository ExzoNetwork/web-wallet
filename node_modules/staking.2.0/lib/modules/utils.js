"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cachedCallWithRetries = cachedCallWithRetries;
exports.callWithRetries = callWithRetries;
exports.invalidateCache = invalidateCache;

var _manyKeysMap = require("./many-keys-map.js");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var cacheMap = new _manyKeysMap.ManyKeysMap();

function invalidateCache() {
  return _invalidateCache.apply(this, arguments);
}

function _invalidateCache() {
  _invalidateCache = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            cacheMap.clear();

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _invalidateCache.apply(this, arguments);
}

function cachedCallWithRetries(_x, _x2, _x3) {
  return _cachedCallWithRetries.apply(this, arguments);
}

function _cachedCallWithRetries() {
  _cachedCallWithRetries = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(network, params, call) {
    var params$, res;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            params$ = params;

            if (network && params$ && params$.unshift) {
              params$.unshift(network);
            }

            if (cacheMap.has(params$)) {
              _context2.next = 8;
              break;
            }

            res = callWithRetries(call, params);
            cacheMap.set(params, callWithRetries(call, params));
            return _context2.abrupt("return", res);

          case 8:
            return _context2.abrupt("return", cacheMap.get(params$));

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _cachedCallWithRetries.apply(this, arguments);
}

function callWithRetries(_x4, _x5) {
  return _callWithRetries.apply(this, arguments);
}

function _callWithRetries() {
  _callWithRetries = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(call, params) {
    var maxTries,
        tries,
        timeout,
        _args3 = arguments;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            maxTries = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : 5;
            tries = 0;
            timeout = null;

          case 3:
            if (!true) {
              _context3.next = 23;
              break;
            }

            _context3.prev = 4;
            _context3.next = 7;
            return call();

          case 7:
            return _context3.abrupt("return", _context3.sent);

          case 10:
            _context3.prev = 10;
            _context3.t0 = _context3["catch"](4);
            console.error(_context3.t0, params && params.map(function (o) {
              return o.toString();
            }).join());
            tries++;

            if (!(tries >= maxTries)) {
              _context3.next = 17;
              break;
            }

            console.log("MAX tries!");
            return _context3.abrupt("return", Promise.reject({
              error: '[callWithRetries] MAX_TRIES_ERROR # ' + (params || []).map(function (o) {
                return o.toString();
              }).join()
            }));

          case 17:
            ;
            console.log('[callWithRetries] try # ', tries, ' of ', maxTries);
            _context3.next = 21;
            return new Promise(function (resolve) {
              return timeout = setTimeout(resolve, 1000 * tries);
            });

          case 21:
            _context3.next = 3;
            break;

          case 23:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[4, 10]]);
  }));
  return _callWithRetries.apply(this, arguments);
}