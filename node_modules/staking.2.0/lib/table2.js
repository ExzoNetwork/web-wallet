"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Box = _interopRequireDefault(require("@mui/material/Box"));

var _Table = _interopRequireDefault(require("@mui/material/Table"));

var _TableBody = _interopRequireDefault(require("@mui/material/TableBody"));

var _TableCell = _interopRequireDefault(require("@mui/material/TableCell"));

var _TableContainer = _interopRequireDefault(require("@mui/material/TableContainer"));

var _TableHead = _interopRequireDefault(require("@mui/material/TableHead"));

var _TableRow = _interopRequireDefault(require("@mui/material/TableRow"));

var _TableSortLabel = _interopRequireDefault(require("@mui/material/TableSortLabel"));

var _Paper = _interopRequireDefault(require("@mui/material/Paper"));

var _utils = require("@mui/utils");

var _listItem = _interopRequireDefault(require("./listItem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var descendingComparator = function descendingComparator(a, b, orderBy) {
  if (orderBy.length === 0) return;

  if (a[orderBy].toNumber && b[orderBy].toNumber) {
    return a[orderBy].cmp(b[orderBy]);
  }

  if (b[orderBy] < a[orderBy]) {
    return -1;
  }

  if (b[orderBy] > a[orderBy]) {
    return 1;
  }

  return 0;
};

var getComparator = function getComparator(order, orderBy) {
  return order === "desc" ? function (a, b) {
    return descendingComparator(a, b, orderBy);
  } : function (a, b) {
    return -descendingComparator(a, b, orderBy);
  };
};

var stableSort = function stableSort(array, comparator) {
  var stabilizedThis = (array || []).map(function (el, index) {
    return [el, index];
  });
  stabilizedThis.sort(function (a, b) {
    var order = comparator(a[0], b[0]);

    if (order !== 0) {
      return order;
    }

    return a[1] - b[1];
  });
  return (stabilizedThis || []).map(function (el) {
    return el[0];
  });
};

var headCells = [{
  numeric: false,
  disablePadding: false,
  label: "",
  hideIcon: true
}, {
  id: "address",
  numeric: false,
  disablePadding: false,
  label: "Account"
}, {
  id: "commission",
  numeric: true,
  disablePadding: false,
  label: "Commission,%"
}, {
  id: "myStake",
  numeric: true,
  disablePadding: false,
  label: "My Stake (VLX)",
  width: true
}, {
  id: "apr",
  numeric: true,
  disablePadding: false,
  label: "Apr,%"
}, {
  id: "totalStakers",
  numeric: true,
  disablePadding: false,
  label: "Stakers"
}, {
  id: "status",
  numeric: false,
  disablePadding: false,
  label: "Status"
}];
var headCells1 = [{
  numeric: false,
  disablePadding: false,
  hideIcon: true
}, {
  id: "address",
  numeric: false,
  disablePadding: false,
  label: "Account"
}, {
  id: "commission",
  numeric: true,
  disablePadding: false,
  label: "Commission,%"
}, {
  id: "activeStake",
  numeric: true,
  disablePadding: false,
  label: 'Total Staked (VLX)',
  width: true
}, {
  id: "apr",
  numeric: true,
  disablePadding: false,
  label: "Apr,%"
}, {
  id: "totalStakers",
  numeric: true,
  disablePadding: false,
  label: "Stakers"
}, {
  id: "status",
  numeric: false,
  disablePadding: false,
  label: "Status"
}];
var styleHead = {
  color: '#fff',
  backgroundColor: '#04051b',
  borderWidth: 0,
  fontSize: 12
};

var EnhancedTableHead = function EnhancedTableHead(props) {
  var order = props.order,
      orderBy = props.orderBy,
      onRequestSort = props.onRequestSort,
      staked = props.staked;

  var createSortHandler = function createSortHandler(property) {
    return function (event) {
      onRequestSort(event, property);
    };
  };

  return /*#__PURE__*/React.createElement(_TableHead.default, null, /*#__PURE__*/React.createElement(_TableRow.default, null, staked ? (headCells || []).map(function (headCell) {
    return /*#__PURE__*/React.createElement(_TableCell.default, {
      key: headCell.id + "_headCell",
      align: headCell.numeric ? "right" : "left",
      style: _objectSpread(_objectSpread({}, styleHead), {}, {
        minWidth: headCell.width && 140,
        height: 35
      }),
      className: "style-head"
    }, /*#__PURE__*/React.createElement(_TableSortLabel.default, {
      hideSortIcon: false,
      active: orderBy === headCell.id,
      direction: orderBy === headCell.id ? order : "asc",
      onClick: createSortHandler(headCell.id),
      style: {
        display: headCell.hideIcon && "none"
      }
    }, headCell.label));
  }) : (headCells1 || []).map(function (headCell) {
    return /*#__PURE__*/React.createElement(_TableCell.default, {
      key: headCell.id + "_headCell",
      align: headCell.numeric ? "right" : "left",
      style: _objectSpread(_objectSpread({}, styleHead), {}, {
        minWidth: headCell.width && 140,
        height: 35
      }),
      className: "style-head"
    }, /*#__PURE__*/React.createElement(_TableSortLabel.default, {
      hideSortIcon: false,
      active: orderBy === headCell.id,
      direction: orderBy === headCell.id ? order : "asc",
      onClick: createSortHandler(headCell.id),
      style: {
        display: headCell.hideIcon && "none"
      }
    }, headCell.label));
  })));
}; // EnhancedTableHead.propTypes = {
//   numSelected: PropTypes.number.isRequired,
//   onRequestSort: PropTypes.func.isRequired,
//   onSelectAllClick: PropTypes.func.isRequired,
//   order: PropTypes.oneOf(["asc", "desc"]).isRequired,
//   orderBy: PropTypes.string.isRequired,
//   rowCount: PropTypes.number.isRequired
// };


var EnhancedTable = function EnhancedTable(props) {
  var _React$useState = React.useState("asc"),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      order = _React$useState2[0],
      setOrder = _React$useState2[1];

  var _React$useState3 = React.useState(''),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      orderBy = _React$useState4[0],
      setOrderBy = _React$useState4[1];

  var stakingStore = props.stakingStore,
      goToDetails = props.goToDetails,
      staked = props.staked;
  var filterStake = stakingStore.getStakedValidators();
  var filterTotalStaked = stakingStore.getNotStakedValidators();

  var handleRequestSort = function handleRequestSort(event, property) {
    var isAsc = orderBy === property && order === "asc";
    setOrder(isAsc ? "desc" : "asc");
    setOrderBy(property);
  };

  return /*#__PURE__*/React.createElement(_Box.default, {
    sx: {
      width: "100%"
    }
  }, /*#__PURE__*/React.createElement(_Paper.default, {
    sx: {
      width: "100%",
      mb: 2
    }
  }, /*#__PURE__*/React.createElement(_TableContainer.default, {
    style: {
      height: props.staked ? 250 : props.search ? 540 : 250,
      backgroundColor: '#1d224e'
    }
  }, /*#__PURE__*/React.createElement(_Table.default, {
    size: 'small',
    stickyHeader: true,
    "aria-label": "sticky table",
    sx: {
      minWidth: 650,
      backgroundColor: '#1f2853'
    }
  }, /*#__PURE__*/React.createElement(EnhancedTableHead, {
    order: order,
    orderBy: orderBy,
    onRequestSort: handleRequestSort,
    staked: staked
  }), /*#__PURE__*/React.createElement(_TableBody.default, null, staked ? stableSort(filterStake, getComparator(order, orderBy)).map(function (item, index) {
    return /*#__PURE__*/React.createElement(_listItem.default, {
      key: item.address,
      staked: true,
      onClick: goToDetails(item.address, item.name, item.apr, item.status, item.myStake),
      address: item.address,
      name: item.name,
      myStake: item.myStake,
      commission: item.commission,
      apr: item.apr,
      totalStakers: item.totalStakers,
      status: item.status
    });
  }) : stableSort(filterTotalStaked, getComparator(order, orderBy)).map(function (item, index) {
    return /*#__PURE__*/React.createElement(_listItem.default, {
      key: item.address + "_",
      onClick: goToDetails(item.address, item.name, item.apr, item.status, item.activeStake),
      address: item.address,
      name: item.name,
      totalStaked: item.activeStake,
      commission: item.commission,
      apr: item.apr,
      totalStakers: item.totalStakers,
      status: item.status
    });
  }))))));
};

var _default = EnhancedTable;
exports.default = _default;