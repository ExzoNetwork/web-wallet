"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RewardModel = void 0;

var _bn = _interopRequireDefault(require("bn.js"));

var _mobx = require("mobx");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var RewardModel = /*#__PURE__*/function () {
  function RewardModel(solanaReward, epoch, connection, network) {
    var epochDuration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

    _classCallCheck(this, RewardModel);

    _defineProperty(this, "solanaReward", null);

    _defineProperty(this, "epoch", null);

    _defineProperty(this, "apr", null);

    _defineProperty(this, "network", null);

    _defineProperty(this, "epochDuration", 0);

    this.solanaReward = solanaReward;
    this.connection = connection;
    this.epoch = epoch;
    this.network = network;
    this.epochDuration = epochDuration;
    (0, _mobx.decorate)(this, {
      apr: _mobx.observable
    });
    if (this.epochDuration) // If list of accounts/validators
      this.calcApr(this.epochDuration); // If stake account rewards list
    else this.loadApr();
  }

  _createClass(RewardModel, [{
    key: "amount",
    get: function get() {
      return new _bn.default(this.solanaReward ? this.solanaReward.lamports + '' : 0, 10);
    }
  }, {
    key: "getEpochSchedule",
    value: function () {
      var _getEpochSchedule = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _this = this;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _utils.cachedCallWithRetries)(this.network, ['getEpochSchedule', this.connection], function () {
                  return _this.connection.getEpochSchedule();
                });

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getEpochSchedule() {
        return _getEpochSchedule.apply(this, arguments);
      }

      return getEpochSchedule;
    }()
  }, {
    key: "getConfirmedBlocksWithLimit",
    value: function () {
      var _getConfirmedBlocksWithLimit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(firstSlotInEpoch) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _utils.cachedCallWithRetries)(this.network, ['getConfirmedBlocksWithLimit', this.connection, firstSlotInEpoch, 1], function () {
                  return _this2.connection.getConfirmedBlocksWithLimit(firstSlotInEpoch, 1);
                });

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getConfirmedBlocksWithLimit(_x) {
        return _getConfirmedBlocksWithLimit.apply(this, arguments);
      }

      return getConfirmedBlocksWithLimit;
    }()
  }, {
    key: "getConfirmedBlock",
    value: function () {
      var _getConfirmedBlock = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(blockNumber) {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _utils.cachedCallWithRetries)(this.network, ['getConfirmedBlock', this.connection, blockNumber], function () {
                  return _this3.connection.getConfirmedBlock(blockNumber, 'confirmed');
                });

              case 2:
                return _context3.abrupt("return", _context3.sent);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getConfirmedBlock(_x2) {
        return _getConfirmedBlock.apply(this, arguments);
      }

      return getConfirmedBlock;
    }()
  }, {
    key: "getEpochTimeTs",
    value: function () {
      var _getEpochTimeTs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(epoch) {
        var _yield$this$getEpochS, firstNormalEpoch, firstNormalSlot, leaderScheduleSlotOffset, slotsPerEpoch, warmup, firstSlotInEpoch, blockNumberResult, blockResult;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.getEpochSchedule();

              case 2:
                _yield$this$getEpochS = _context4.sent;
                firstNormalEpoch = _yield$this$getEpochS.firstNormalEpoch;
                firstNormalSlot = _yield$this$getEpochS.firstNormalSlot;
                leaderScheduleSlotOffset = _yield$this$getEpochS.leaderScheduleSlotOffset;
                slotsPerEpoch = _yield$this$getEpochS.slotsPerEpoch;
                warmup = _yield$this$getEpochS.warmup;
                firstSlotInEpoch = (epoch - firstNormalEpoch) * slotsPerEpoch + firstNormalSlot;
                _context4.next = 11;
                return this.getConfirmedBlocksWithLimit(firstSlotInEpoch);

              case 11:
                blockNumberResult = _context4.sent;
                _context4.next = 14;
                return this.getConfirmedBlock(blockNumberResult.result[0], 'confirmed');

              case 14:
                blockResult = _context4.sent;

                if (blockResult.blockTime) {
                  _context4.next = 17;
                  break;
                }

                throw new Error('[getConfirmedBlock] blocktime is not defined');

              case 17:
                return _context4.abrupt("return", blockResult.blockTime);

              case 18:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getEpochTimeTs(_x3) {
        return _getEpochTimeTs.apply(this, arguments);
      }

      return getEpochTimeTs;
    }()
  }, {
    key: "calcApr",
    value: function calcApr(epochDuration) {
      var epochsPerYear = epochDuration > 0 ? 365.25 * 24 * 3600 / epochDuration : 0;
      var amountPerPerEpoch = this.solanaReward ? this.solanaReward.lamports / (this.solanaReward.postBalance - this.solanaReward.lamports) : 0;
      this.apr = amountPerPerEpoch * epochsPerYear;
    }
  }, {
    key: "loadApr",
    value: function () {
      var _loadApr = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        var epochDuration, epochsPerYear, amountPerPerEpoch;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.getEpochTimeTs(this.epoch + 1);

              case 2:
                _context5.t0 = _context5.sent;
                _context5.next = 5;
                return this.getEpochTimeTs(this.epoch);

              case 5:
                _context5.t1 = _context5.sent;
                epochDuration = _context5.t0 - _context5.t1;
                epochsPerYear = epochDuration > 0 ? 365.25 * 24 * 3600 / epochDuration : 0;
                amountPerPerEpoch = this.solanaReward ? this.solanaReward.lamports / (this.solanaReward.postBalance - this.solanaReward.lamports) : 0;
                this.apr = amountPerPerEpoch * epochsPerYear;

              case 10:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function loadApr() {
        return _loadApr.apply(this, arguments);
      }

      return loadApr;
    }()
  }]);

  return RewardModel;
}();

exports.RewardModel = RewardModel;