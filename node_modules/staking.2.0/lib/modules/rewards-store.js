"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rewardsStore = void 0;

var _mobx = require("mobx");

var _utils = require("./utils");

var _rewardModel = require("./reward-model");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//const solanaWeb3 = require('./index.cjs.js');
var solanaWeb3 = require('@velas/web3'); //import * as solanaWeb3 from '@velas/web3';


var RewardsStore = /*#__PURE__*/function () {
  function RewardsStore() {
    var _this = this;

    _classCallCheck(this, RewardsStore);

    _defineProperty(this, "connection", null);

    _defineProperty(this, "network", null);

    _defineProperty(this, "isLatestRewardsLoading", null);

    _defineProperty(this, "setlatestRewardsPerValidator", function (tmpMap, epoch, cb) {
      (0, _mobx.runInAction)(function () {
        _this.getEpochDuration(epoch - 1, function (epochDuration) {
          tmpMap.forEach(function (value, key) {
            var maxAmount = -1;
            var biggestReward = null;

            var _iterator = _createForOfIteratorHelper(value),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var reward = _step.value;

                if (reward.lamports > maxAmount) {
                  maxAmount = reward.lamports;
                  biggestReward = reward;
                }
              } // Here we load calc apr for each RewardModel

            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            var rm = new _rewardModel.RewardModel(biggestReward, epoch - 1, _this.connection, _this.network, epochDuration);

            _this.latestRewardsPerValidator.set(key, [rm]);
          });
          cb();
        });
      });
    });

    (0, _mobx.decorate)(this, {
      isLatestRewardsLoading: _mobx.observable,
      latestRewardsPerValidator: _mobx.observable
    });
  }

  _createClass(RewardsStore, [{
    key: "setConnection",
    value: function setConnection(connection, network) {
      this.network = network;
      this.connection = connection;
      this.loadLatestRewards(function () {});
    }
  }, {
    key: "getLatestRewardsOfVaildator",
    value: function getLatestRewardsOfVaildator(address, cb) {
      if (!this.latestRewardsPerValidator) {
        return cb([]);
      }

      return cb(this.latestRewardsPerValidator.get(address) || []);
    }
  }, {
    key: "loadLatestRewards",
    value: function loadLatestRewards(cb) {
      var _this2 = this;

      (0, _mobx.runInAction)(function () {
        if (_this2.isLatestRewardsLoading) {
          return;
        }

        _this2.isLatestRewardsLoading = true;

        _this2.getAccounts().then(function (accounts) {
          var accountMap = new Map();

          var _iterator2 = _createForOfIteratorHelper(accounts),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var account = _step2.value;
              accountMap.set(account.pubkey.toBase58(), account);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          _this2.getEpochSchedule().then(function (res) {
            var firstNormalEpoch = res.firstNormalEpoch;
            var firstNormalSlot = res.firstNormalSlot;
            var leaderScheduleSlotOffset = res.leaderScheduleSlotOffset;
            var slotsPerEpoch = res.slotsPerEpoch;
            var warmup = res.warmup;

            _this2.getEpochInfo().then(function (resp) {
              var epoch = resp.epoch;
              var firstSlotInEpoch = (epoch - firstNormalEpoch) * slotsPerEpoch + firstNormalSlot;

              _this2.getConfirmedBlocksWithLimit(firstSlotInEpoch).then(function (blockNumberResult) {
                _this2.getConfirmedBlock(blockNumberResult.result[0]).then(function (blockResult) {
                  _this2.latestRewardsPerValidator = new _mobx.observable.map();
                  var tmpMap = new Map();

                  var _iterator3 = _createForOfIteratorHelper(blockResult.rewards),
                      _step3;

                  try {
                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                      var reward = _step3.value;
                      var account = accountMap.get(reward.pubkey);
                      if (!account || !account.account.data.parsed.info || !account.account.data.parsed.info.stake) continue;
                      var voter = account.account.data.parsed.info.stake.delegation.voter;

                      if (!tmpMap.has(voter)) {
                        tmpMap.set(voter, []);
                        continue;
                      }

                      tmpMap.get(voter).push(reward);
                    }
                  } catch (err) {
                    _iterator3.e(err);
                  } finally {
                    _iterator3.f();
                  }

                  _this2.setlatestRewardsPerValidator(tmpMap, epoch, function () {
                    _this2.isLatestRewardsLoading = false;
                    cb();
                  });
                }).catch(function (err) {
                  console.warn('[getConfirmedBlock] error', err);
                });
              }).catch(function (err) {
                console.warn('[getConfirmedBlocksWithLimit] error', err);
              });
            }).catch(function (err) {
              console.warn('[getEpochInfo] error', err);
            });
          }).catch(function (err) {
            console.warn('[getEpochSchedule] error', err);
          });
        }).catch(function (err) {
          console.warn('[getAccounts] error', err);
        });
      });
    }
  }, {
    key: "getEpochSchedule",
    value: function () {
      var _getEpochSchedule = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _this3 = this;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _utils.cachedCallWithRetries)(this.network, ['getEpochSchedule', this.connection], function () {
                  return _this3.connection.getEpochSchedule();
                });

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getEpochSchedule() {
        return _getEpochSchedule.apply(this, arguments);
      }

      return getEpochSchedule;
    }()
  }, {
    key: "getEpochInfo",
    value: function () {
      var _getEpochInfo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _utils.cachedCallWithRetries)(this.network, ['getEpochInfo', this.connection], function () {
                  return _this4.connection.getEpochInfo();
                });

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getEpochInfo() {
        return _getEpochInfo.apply(this, arguments);
      }

      return getEpochInfo;
    }()
  }, {
    key: "getConfirmedBlocksWithLimit",
    value: function () {
      var _getConfirmedBlocksWithLimit = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(firstSlotInEpoch) {
        var _this5 = this;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0, _utils.cachedCallWithRetries)(this.network, ['getConfirmedBlocksWithLimit', this.connection, firstSlotInEpoch, 1], function () {
                  return _this5.connection.getConfirmedBlocksWithLimit(firstSlotInEpoch, 1);
                });

              case 2:
                return _context3.abrupt("return", _context3.sent);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getConfirmedBlocksWithLimit(_x) {
        return _getConfirmedBlocksWithLimit.apply(this, arguments);
      }

      return getConfirmedBlocksWithLimit;
    }()
  }, {
    key: "getConfirmedBlock",
    value: function () {
      var _getConfirmedBlock = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(blockNumber) {
        var _this6 = this;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _utils.cachedCallWithRetries)(this.network, ['getConfirmedBlock', this.connection, blockNumber], function () {
                  return _this6.connection.getConfirmedBlock(blockNumber, 'confirmed');
                });

              case 2:
                return _context4.abrupt("return", _context4.sent);

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getConfirmedBlock(_x2) {
        return _getConfirmedBlock.apply(this, arguments);
      }

      return getConfirmedBlock;
    }()
  }, {
    key: "getAccounts",
    value: function () {
      var _getAccounts = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        var _this7 = this;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0, _utils.cachedCallWithRetries)(this.network, ['getParsedProgramAccounts', this.connection, solanaWeb3.StakeProgram.programId.toString()], function () {
                  return _this7.connection.getParsedProgramAccounts(solanaWeb3.StakeProgram.programId);
                });

              case 2:
                return _context5.abrupt("return", _context5.sent);

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getAccounts() {
        return _getAccounts.apply(this, arguments);
      }

      return getAccounts;
    }()
  }, {
    key: "getEpochTimeTs",
    value: function getEpochTimeTs(epoch, cb) {
      var _this8 = this;

      this.getEpochSchedule().then(function (result) {
        var firstSlotInEpoch = (epoch - result.firstNormalEpoch) * result.slotsPerEpoch + result.firstNormalSlot;

        _this8.getConfirmedBlocksWithLimit(firstSlotInEpoch).then(function (blockNumberResult) {
          if (!blockNumberResult.result || blockNumberResult.result.length === 0) {
            return cb(0);
          }

          _this8.getConfirmedBlock(blockNumberResult.result[0]).then(function (blockResult) {
            if (!blockResult) return cb(0);

            if (!blockResult.blockTime) {
              console.error('[getConfirmedBlock] blocktime is not defined');
              return cb(0);
            }

            return cb(blockResult.blockTime);
          }).catch(function (err) {
            return console.error('[getConfirmedBlock Error]', err);
          });
        }).catch(function (err) {
          return console.error('[getConfirmedBlocksWithLimit Error]', err);
        });
      }).catch(function (err) {
        return console.error('[getEpochSchedule Error]', err);
      });
    }
  }, {
    key: "getEpochDuration",
    value: function getEpochDuration(epoch, cb) {
      var _this9 = this;

      this.getEpochTimeTs(epoch + 1, function (epochEndTime) {
        _this9.getEpochTimeTs(epoch, function (epochStartTime) {
          var epochDuration = epochEndTime - epochStartTime;
          cb(epochDuration);
        });
      });
    }
  }]);

  return RewardsStore;
}();

var rewardsStore = new RewardsStore();
exports.rewardsStore = rewardsStore;