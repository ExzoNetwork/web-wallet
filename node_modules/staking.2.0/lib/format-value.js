"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapNumber = exports.formatValue = exports.formatStakeAmount = exports.formatReward = exports.formatBalance = exports.formatAmount = exports.amountToBN = void 0;

var _bn = _interopRequireDefault(require("bn.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var formatBalance = function formatBalance(n) {
  if (n < 1e3) return n;
  if (n >= 1e3 && n < 1e9) return n.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  if (n >= 1e9 && n < 1e12) return '≈' + (n / 1e9).toFixed(1) + 'B';
};

exports.formatBalance = formatBalance;

var formatValue = function formatValue(n) {
  if (n < 1e3) return n;
  if (n >= 1e3 && n < 1e9) return n.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  if (n >= 1e9 && n < 1e12) return '≈' + (n / 1e9).toFixed(1) + 'B';
};

exports.formatValue = formatValue;

var wrapNumber = function wrapNumber(n) {
  return n.replace(',', '.').replace(/[^0-9\.]/g, '');
};

exports.wrapNumber = wrapNumber;

var formatStakeAmount = function formatStakeAmount(n) {
  if (!n) {
    return '...';
  }

  try {
    if (Number.isInteger(n) || n.isZero()) {
      return '0';
    }
  } catch (err) {
    console.log("formatStakeAmount err:", err, n);
    return '0';
  }

  if (n.lt(new _bn.default('10000000', 10))) {
    return '< 0.01';
  }

  n = n.div(new _bn.default('10000000', 10)).toNumber() / 100;
  return n.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',');
};

exports.formatStakeAmount = formatStakeAmount;

var formatAmount = function formatAmount(n) {
  n = n.div(new _bn.default('10000000', 10)).toNumber() / 100;
  return n.toFixed(2);
}; // TO DO for large numbers


exports.formatAmount = formatAmount;

var formatReward = function formatReward(n) {
  n = n.div(new _bn.default('100000', 10)).toNumber() / 10000;
  return n.toFixed(4);
};

exports.formatReward = formatReward;

var amountToBN = function amountToBN(amount) {
  if (!parseFloat(amount)) {
    return new _bn.default(0);
  }

  var parts = amount.split('.');

  if (!parts[1]) {
    return new _bn.default(parts[0] + '000000000', 10);
  }

  return new _bn.default(parts[0] + parts[1] + '000000000'.slice(parts[1].length), 10);
};

exports.amountToBN = amountToBN;