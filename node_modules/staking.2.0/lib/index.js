'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var _react = _interopRequireWildcard(require("react"));

var _Box = _interopRequireDefault(require("@mui/material/Box"));

var _reactJdenticon = _interopRequireDefault(require("react-jdenticon"));

var _badge = _interopRequireDefault(require("./badge"));

var _infoBlock = _interopRequireDefault(require("./infoBlock"));

var _tabs = _interopRequireDefault(require("./tabs"));

var _buttonBlock = _interopRequireDefault(require("./buttonBlock"));

var _IconButton = _interopRequireDefault(require("@mui/material/IconButton"));

var _Alert = _interopRequireDefault(require("@mui/material/Alert"));

var _Cached = _interopRequireDefault(require("@mui/icons-material/Cached"));

var _input = _interopRequireDefault(require("./input"));

var _header = _interopRequireDefault(require("./header"));

var _enterance = _interopRequireDefault(require("./enterance"));

var _mobxReact = require("mobx-react");

var _formatValue = require("./format-value");

var _bn = _interopRequireDefault(require("bn.js"));

var _CircularProgress = _interopRequireDefault(require("@mui/material/CircularProgress"));

var _Close = _interopRequireDefault(require("@mui/icons-material/Close"));

var _stake = _interopRequireDefault(require("./screen/stake"));

var _loader = _interopRequireDefault(require("./loader"));

var _Search = _interopRequireDefault(require("@mui/icons-material/Search"));

var _Autorenew = _interopRequireDefault(require("@mui/icons-material/Autorenew"));

var _reactSectionList = _interopRequireDefault(require("./reactSectionList"));

var _stakeItem = _interopRequireDefault(require("./stakeItem"));

var _epochCurrent = require("./images/epoch-current");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var style = {
  position: 'absolute',
  top: '53%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  minWidth: 430,
  width: 'auto',
  bgcolor: "#151839",
  border: '1px solid rgba(255, 255, 255, 0.07)',
  p: 2,
  color: "rgb(255, 255, 255)",
  height: 600
};
var style2 = {
  position: 'absolute',
  top: '53%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: '50%',
  bgcolor: "#151839",
  border: '1px solid rgba(255, 255, 255, 0.07)',
  p: 2,
  color: "rgb(255, 255, 255)",
  height: 600
};
var widthContainer = {
  width: 430
};
var styleSpinner = {
  top: '48%',
  position: "absolute",
  left: '48%',
  color: "#fff"
};
var styleAlert = {
  position: "absolute",
  top: '0%',
  right: 0,
  left: 0,
  zIndex: 99,
  padding: 10,
  borderRadius: 0
};

var StakingPage = function StakingPage(props) {
  var stakingStore = props.stakingStore;

  var _React$useState = _react.default.useState({
    show: false,
    address: '',
    name: '',
    apr: '',
    status: '',
    nodePubKey: '',
    activeStake: ''
  }),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      showStakePage = _React$useState2[0],
      setShowStakePage = _React$useState2[1];

  var onClickRequest = function onClickRequest() {
    setShowDetails(false);
    setShowRequestWithdraw(true);
    setShowSuccessWithdraw(false);
  };

  var onPressReload = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              stakingStore.getValidatorsError = null;
              _context.next = 3;
              return stakingStore.reloadWithRetry();

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function onPressReload() {
      return _ref.apply(this, arguments);
    };
  }();

  var _React$useState3 = _react.default.useState(null),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      withdrawError = _React$useState4[0],
      setWithdrawError = _React$useState4[1];

  var _React$useState5 = _react.default.useState(false),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      withdrawInProgress = _React$useState6[0],
      setWithdrawInProgress = _React$useState6[1];

  var _React$useState7 = _react.default.useState(false),
      _React$useState8 = _slicedToArray(_React$useState7, 2),
      requestWithdrawInProgress = _React$useState8[0],
      setRequestWithdrawInProgress = _React$useState8[1];

  var goToDetails = function goToDetails(address, name, apr, status, nodePubKey, activeStake) {
    return function () {
      setShowStakePage(_objectSpread(_objectSpread({}, showStakePage), {}, {
        show: true,
        address: address,
        name: name,
        apr: apr,
        status: status,
        nodePubKey: nodePubKey,
        activeStake: activeStake
      }));
      setShowDetails(true);
      stakingStore.openedValidatorAddress = address;
    };
  };

  var goToDetailsFromSuccessWithdraw = function goToDetailsFromSuccessWithdraw() {
    setShowSuccessWithdraw(false);
    setShowDetails(true);
  };

  var _React$useState9 = _react.default.useState(false),
      _React$useState10 = _slicedToArray(_React$useState9, 2),
      loading = _React$useState10[0],
      setLoading = _React$useState10[1];

  var _React$useState11 = _react.default.useState(false),
      _React$useState12 = _slicedToArray(_React$useState11, 2),
      showSuccessWithdraw = _React$useState12[0],
      setShowSuccessWithdraw = _React$useState12[1];

  var _React$useState13 = _react.default.useState(false),
      _React$useState14 = _slicedToArray(_React$useState13, 2),
      showRequestWithdraw = _React$useState14[0],
      setShowRequestWithdraw = _React$useState14[1];

  var StakePage = function StakePage(props) {
    var _useState = (0, _react.useState)(false),
        _useState2 = _slicedToArray(_useState, 2),
        showEpoch = _useState2[0],
        setShowEpoch = _useState2[1];

    var _React$useState15 = _react.default.useState(false),
        _React$useState16 = _slicedToArray(_React$useState15, 2),
        showSort = _React$useState16[0],
        setShowSort = _React$useState16[1];

    var _React$useState17 = _react.default.useState({
      name: null
    }),
        _React$useState18 = _slicedToArray(_React$useState17, 2),
        sortApr = _React$useState18[0],
        setSortApr = _React$useState18[1];

    var _React$useState19 = _react.default.useState({
      name: null
    }),
        _React$useState20 = _slicedToArray(_React$useState19, 2),
        sortTotalStaked = _React$useState20[0],
        setSortTotalStaked = _React$useState20[1];

    var _React$useState21 = _react.default.useState([]),
        _React$useState22 = _slicedToArray(_React$useState21, 2),
        validators = _React$useState22[0],
        setValidators = _React$useState22[1];

    var _React$useState23 = _react.default.useState([]),
        _React$useState24 = _slicedToArray(_React$useState23, 2),
        notValidators = _React$useState24[0],
        setNotValidators = _React$useState24[1];

    var _useState3 = (0, _react.useState)(false),
        _useState4 = _slicedToArray(_useState3, 2),
        openSearch = _useState4[0],
        setOpenSearch = _useState4[1];

    var handleSort = function handleSort() {
      setShowSort(true);
    };

    var sortedValidators;

    var handleSortAprt = function handleSortAprt() {
      setShowSort(false);
      setSortTotalStaked(false);
      setSortApr(_objectSpread(_objectSpread({}, setSortApr), {}, {
        name: "Apr"
      }));
      sortedValidators = validators && validators.sort(function (v1, v2) {
        return v2.apr - v1.apr;
      });
      setValidators(sortedValidators);
    };

    var handleSortTotalStaked = function handleSortTotalStaked() {
      setShowSort(false);
      setSortApr(false);
      setSortTotalStaked(_objectSpread(_objectSpread({}, setSortTotalStaked), {}, {
        name: "Total Staked"
      }));
      sortedValidators = validators && validators.sort(function (v1, v2) {
        return v2.activeStake - v1.activeStake;
      });
      setNotValidators(sortedValidators);
    };

    var handleClickEpoch = function handleClickEpoch() {
      setShowEpoch(true);
    };

    if (showStakePage.show) return null;

    var SearchValidator = function SearchValidator(props) {
      var _useState5 = (0, _react.useState)(''),
          _useState6 = _slicedToArray(_useState5, 2),
          searchValidator = _useState6[0],
          setSearchValidator = _useState6[1];

      var _useState7 = (0, _react.useState)([]),
          _useState8 = _slicedToArray(_useState7, 2),
          foundValidators = _useState8[0],
          setFoundValidators = _useState8[1];

      var inputStyle = {
        color: '#fff',
        backgroundColor: '#292B52',
        paddingRight: 10,
        paddingBlock: 5,
        paddingLeft: 5,
        width: 'inherit',
        marginRight: 20
      };
      var emptyView = {
        flexDirection: 'row',
        justifyContent: 'center',
        display: "flex",
        marginTop: '50%'
      };

      var filter = function filter(e) {
        var keyword = e.target.value;

        if (keyword.length) {
          var results = props.filterStake.filter(function (item) {
            return item.address && item.address.toUpperCase().match(keyword.toUpperCase()) || item.activeStake && item.activeStake.toString().match(keyword.toString()) || item.name && item.name.toUpperCase().match(keyword.toUpperCase());
          });
          setFoundValidators(results);
        } else {
          setOpenSearch(true); // setFoundValidators(props.filterStake);
        }

        setSearchValidator(keyword);
      };

      var styleRow = {
        backgroundColor: "#1F2853",
        borderBottom: 1,
        borderBottomStyle: "solid",
        borderBottomColor: '#151839',
        height: 95,
        paddingBlock: 0
      };
      var searchTable = {
        overflow: 'scroll',
        height: 550,
        backgroundColor: "#151839",
        marginTop: 10
      };
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "search-container",
        style: {
          marginTop: 10
        }
      }, /*#__PURE__*/_react.default.createElement(_input.default, {
        type: "search",
        style: props.style || inputStyle,
        value: searchValidator,
        onChange: filter,
        className: "input-search",
        placeholder: "Search..",
        search: true,
        onClose: function onClose() {
          return setOpenSearch(false);
        }
      }), !searchValidator ? null : foundValidators && foundValidators.length > 0 ? /*#__PURE__*/_react.default.createElement("div", {
        style: searchTable,
        className: "search-table"
      }, (foundValidators || []).map(function (item) {
        return /*#__PURE__*/_react.default.createElement(_stakeItem.default, {
          key: item.address,
          onClick: goToDetails(item.address, item.name, item.apr, item.status, item.myStake),
          totalStaked: item.activeStake,
          address: item.address,
          name: item.name,
          myStake: item.myStake,
          commission: item.commission,
          apr: item.apr,
          totalStakers: item.totalStakers,
          status: item.status,
          style: styleRow
        });
      })) : /*#__PURE__*/_react.default.createElement("div", {
        style: emptyView
      }, "Nothing to see here!"));
    };

    var epochBlock = {
      backgroundColor: "orange",
      width: '100%',
      height: 50,
      flexDirection: 'row',
      justifyContent: 'space-around',
      alignItems: 'center',
      display: "flex",
      position: 'absolute',
      zIndex: 11111,
      left: 0,
      right: 0
    };
    var btnCloseEpoch = {
      position: "absolute",
      top: 0,
      right: 0
    };
    var epochBtn = {
      color: '#fff',
      position: 'absolute',
      fontSize: 8
    };
    return /*#__PURE__*/_react.default.createElement(_mobxReact.Observer, null, function () {
      var filterStake = stakingStore.getStakedValidators();
      var filterTotalStaked = stakingStore.getNotStakedValidators();
      var allValidators = stakingStore.getAllValidators();
      var epochInfo = stakingStore.epochInfo;
      var epoch = epochInfo && epochInfo.epoch ? epochInfo.epoch : '...';

      var _epochTime = epochInfo ? (epochInfo.slotsInEpoch - epochInfo.slotIndex) * 0.4 / 3600 : '...';

      var epochTime = !isNaN(_epochTime) ? Math.round(_epochTime) : '...';
      var getValidatorsError = stakingStore.getValidatorsError;

      var Loading = function Loading() {
        return /*#__PURE__*/_react.default.createElement(_Box.default, {
          sx: styleSpinner
        }, /*#__PURE__*/_react.default.createElement(_CircularProgress.default, {
          color: "inherit"
        }));
      };

      if (!filterStake || !filterTotalStaked || stakingStore.isRefreshing || stakingStore.isLoading) {
        return /*#__PURE__*/_react.default.createElement("div", {
          style: {
            flex: 1,
            alignItems: 'center'
          }
        }, /*#__PURE__*/_react.default.createElement(Loading, null));
      }

      var sections = [{
        title: "Staked Validators (".concat((filterStake || []).length, ")"),
        data: filterStake
      }, {
        title: "Not Staked Validators (".concat((filterTotalStaked || []).length, ")"),
        data: filterTotalStaked
      }];

      var renderSectionHeader = function renderSectionHeader(item) {
        return /*#__PURE__*/_react.default.createElement("div", null, item.title);
      };

      var renderItems = function renderItems(item) {
        return /*#__PURE__*/_react.default.createElement(_stakeItem.default, {
          key: item.address,
          onClick: goToDetails(item.address, item.name, item.apr, item.status, item.myStake),
          totalStaked: item.activeStake,
          address: item.address,
          name: item.name,
          myStake: item.myStake,
          commission: item.commission,
          apr: item.apr,
          totalStakers: item.totalStakers,
          status: item.status
        });
      };

      return /*#__PURE__*/_react.default.createElement("div", null, getValidatorsError && !stakingStore.isLoading && /*#__PURE__*/_react.default.createElement(_Alert.default, {
        action: /*#__PURE__*/_react.default.createElement(_IconButton.default, {
          color: "inherit",
          onClick: onPressReload
        }, /*#__PURE__*/_react.default.createElement(_Autorenew.default, null)),
        severity: "error",
        id: "error",
        style: styleAlert
      }, getValidatorsError), /*#__PURE__*/_react.default.createElement("div", _extends({
        style: {
          fontSize: 14,
          display: openSearch ? 'none' : 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          marginTop: -10,
          paddingInline: 10,
          backgroundColor: '#14183b'
        }
      }, props, {
        className: "index-title-row-staked"
      }), /*#__PURE__*/_react.default.createElement("div", {
        style: {
          display: openSearch && 'none'
        }
      }, /*#__PURE__*/_react.default.createElement(_IconButton.default, {
        color: "inherit",
        onClick: onPressReload
      }, /*#__PURE__*/_react.default.createElement(_Cached.default, {
        fontSize: "small",
        sx: {
          color: '#ffffff60'
        }
      }))), /*#__PURE__*/_react.default.createElement("div", {
        style: {
          display: openSearch && 'none',
          marginLeft: 25
        }
      }, "STAKE"), /*#__PURE__*/_react.default.createElement("div", {
        style: {
          display: openSearch && 'none',
          alignItems: 'center'
        }
      }, /*#__PURE__*/_react.default.createElement(_IconButton.default, {
        color: "inherit",
        onClick: handleClickEpoch,
        style: {
          position: "relative"
        }
      }, /*#__PURE__*/_react.default.createElement(_epochCurrent.EpochCurrent, null), /*#__PURE__*/_react.default.createElement("div", {
        style: epochBtn
      }, epoch)), /*#__PURE__*/_react.default.createElement(_IconButton.default, {
        color: "inherit",
        onClick: function onClick() {
          return setOpenSearch(true);
        }
      }, /*#__PURE__*/_react.default.createElement(_Search.default, null)))), showEpoch && /*#__PURE__*/_react.default.createElement("div", {
        style: epochBlock
      }, /*#__PURE__*/_react.default.createElement("div", {
        style: btnCloseEpoch
      }, /*#__PURE__*/_react.default.createElement(_IconButton.default, {
        color: "inherit",
        onClick: function onClick() {
          return setShowEpoch(false);
        }
      }, /*#__PURE__*/_react.default.createElement(_Close.default, {
        fontSize: "small",
        sx: {
          color: '#ffffff'
        }
      }))), /*#__PURE__*/_react.default.createElement("div", null, "Epoch: #", epoch), /*#__PURE__*/_react.default.createElement("div", null, "Time until end: ", epochTime, " hours")), openSearch ? /*#__PURE__*/_react.default.createElement(SearchValidator, {
        filterStake: allValidators
      }) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactSectionList.default, {
        renderSectionHeader: renderSectionHeader,
        renderItem: function renderItem(item) {
          return renderItems(item);
        },
        sections: !filterStake.length ? [{
          title: 'Not Staked Validators',
          data: filterTotalStaked
        }] : sections,
        keyExtractor: function keyExtractor(item, index) {
          return item + index;
        },
        style: {
          overflow: 'scroll',
          height: 560,
          backgroundColor: "#151839"
        }
      })));
    });
  };

  var _React$useState25 = _react.default.useState(false),
      _React$useState26 = _slicedToArray(_React$useState25, 2),
      showDetails = _React$useState26[0],
      setShowDetails = _React$useState26[1];

  var backDetailsPage = function backDetailsPage(address, name, apr, status, nodePubKey, activeStake) {
    setShowDetails(false);
    stakingStore.openedValidatorAddress = null;
    setShowStakePage(_objectSpread(_objectSpread({}, showStakePage), {}, {
      show: false,
      address: address,
      name: name,
      apr: apr,
      status: status,
      nodePubKey: nodePubKey,
      activeStake: activeStake
    }));
  };

  var _React$useState27 = _react.default.useState(false),
      _React$useState28 = _slicedToArray(_React$useState27, 2),
      showStakeMore = _React$useState28[0],
      setShowStakeMore = _React$useState28[1];

  var DetailsValidator = function DetailsValidator(props) {
    var details = props.details;
    var address = details.address,
        activeStake = details.activeStake,
        apr = details.apr,
        name = details.name,
        nodePubKey = details.nodePubKey,
        show = details.show,
        status = details.status;

    var _React$useState29 = _react.default.useState(false),
        _React$useState30 = _slicedToArray(_React$useState29, 2),
        copy = _React$useState30[0],
        setCopy = _React$useState30[1];

    if (!showDetails) return null;

    var withdrawAvailable = function withdrawAvailable() {
      setShowDetails(false);
      alert('some spinner'); //add spinner

      setShowSuccessWithdraw(true);
    };

    var copyAddress = function copyAddress() {
      navigator.clipboard.writeText(address);
      setCopy(true);
    };

    var onClickExplorer = function onClickExplorer() {
      window.open("https://native.velas.com/address/".concat(showStakePage.address));
    };

    setTimeout(function () {
      var message = document.getElementById('message');

      if (message) {
        document.getElementById('message').style.display = 'none';
        setCopy(false);
      }
    }, 2000);

    if (!stakingStore.openedValidatorAddress || !details) {
      showStakePage.show = false;
      return null;
    }

    var onPressReload2 = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                stakingStore.getValidatorsError = null;
                _context2.next = 3;
                return stakingStore.reloadWithRetry();

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function onPressReload2() {
        return _ref2.apply(this, arguments);
      };
    }();

    return /*#__PURE__*/_react.default.createElement(_mobxReact.Observer, null, function () {
      var Loading = function Loading() {
        return /*#__PURE__*/_react.default.createElement(_Box.default, {
          sx: styleSpinner
        }, /*#__PURE__*/_react.default.createElement(_CircularProgress.default, {
          color: "inherit"
        }));
      };

      if (stakingStore.isRefreshing || stakingStore.isLoading) {
        return /*#__PURE__*/_react.default.createElement("div", {
          style: {
            flex: 1,
            alignItems: 'center'
          }
        }, /*#__PURE__*/_react.default.createElement(Loading, null));
      }

      var chosenValidator = stakingStore.getValidatorDetails();

      if (!chosenValidator) {
        return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
          className: "staking index-container-details",
          style: widthContainer
        }, /*#__PURE__*/_react.default.createElement(_Alert.default, {
          action: /*#__PURE__*/_react.default.createElement(_IconButton.default, {
            color: "inherit",
            onClick: onPressReload2
          }, /*#__PURE__*/_react.default.createElement(_Autorenew.default, null)),
          severity: "error",
          id: "error",
          style: styleAlert
        }, "Oops. An error occurred. Please try again.")));
      }

      var TOTAL_STAKE = chosenValidator.totalAvailableForWithdrawRequestStake && (0, _formatValue.formatAmount)(chosenValidator.totalAvailableForWithdrawRequestStake);
      var ADDRESS = chosenValidator.address;

      var onPressWithdraw = /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          var result, errMessage, result1, msg;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (!(!chosenValidator || !chosenValidator.availableWithdrawRequested)) {
                    _context3.next = 2;
                    break;
                  }

                  return _context3.abrupt("return");

                case 2:
                  setWithdrawInProgress(true);
                  _context3.prev = 3;
                  _context3.next = 6;
                  return stakingStore.withdrawRequested(address);

                case 6:
                  result = _context3.sent;

                  if (!result.error) {
                    _context3.next = 11;
                    break;
                  }

                  setWithdrawInProgress(false);
                  errMessage = result.description ? result.description : 'Oops. Something went wrong.';
                  return _context3.abrupt("return", setWithdrawError(errMessage));

                case 11:
                  _context3.next = 13;
                  return stakingStore.reloadWithRetry();

                case 13:
                  result1 = _context3.sent;
                  _context3.next = 24;
                  break;

                case 16:
                  _context3.prev = 16;
                  _context3.t0 = _context3["catch"](3);
                  setWithdrawInProgress(false);
                  msg = 'Something went wrong. Please contact support. You can still use web interface for full staking support.';
                  setWithdrawError(msg + '\n\n' + _context3.t0);
                  setTimeout(function () {
                    setWithdrawError(null);
                  }, 3000);
                  console.error(_context3.t0);
                  return _context3.abrupt("return");

                case 24:
                  setShowDetails(false);
                  setShowSuccessWithdraw(true);
                  setWithdrawInProgress(false);

                case 27:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, null, [[3, 16]]);
        }));

        return function onPressWithdraw() {
          return _ref3.apply(this, arguments);
        };
      }();

      var onPressReload = /*#__PURE__*/function () {
        var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return stakingStore.reloadWithRetry();

                case 2:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }));

        return function onPressReload() {
          return _ref4.apply(this, arguments);
        };
      }();

      var goToStake = function goToStake() {
        setShowDetails(false);
        setShowStakeMore(true);
      };

      var address = chosenValidator ? chosenValidator.address : '...';
      var myStake = chosenValidator ? chosenValidator.myStake : new _bn.default(0);
      var activeStake = chosenValidator ? chosenValidator.activeStake : new _bn.default(0);
      var name = chosenValidator ? chosenValidator.name : '...';
      var commission = chosenValidator ? chosenValidator.commission : '...';
      var dominance = chosenValidator ? chosenValidator.dominance : new _bn.default(0);
      var apr = chosenValidator ? ((chosenValidator.apr || 0) * 100).toFixed(2) : 0;
      var myActiveStake = chosenValidator && chosenValidator.myActiveStake ? chosenValidator.myActiveStake : '0';
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
        className: "staking index-container-details",
        style: widthContainer
      }, /*#__PURE__*/_react.default.createElement(_loader.default, {
        show: withdrawInProgress,
        text: 'Withdrawing in process...'
      }), withdrawError && /*#__PURE__*/_react.default.createElement(_Alert.default, {
        onClose: function onClose() {
          setWithdrawError(null);
        },
        severity: "error",
        id: "error",
        style: styleAlert
      }, withdrawError), copy && /*#__PURE__*/_react.default.createElement(_Alert.default, {
        severity: "success",
        id: "message",
        style: styleAlert
      }, "Copied ", address), /*#__PURE__*/_react.default.createElement(_header.default, {
        onClickBack: backDetailsPage,
        onClickReload: onPressReload,
        onClickExplorer: onClickExplorer
      }), /*#__PURE__*/_react.default.createElement("div", {
        style: {
          display: 'flex',
          flexDirection: "column",
          alignItems: "center",
          marginTop: 5
        },
        className: "index-details-avatar-badge"
      }, /*#__PURE__*/_react.default.createElement(_reactJdenticon.default, {
        size: "55",
        value: address
      }), /*#__PURE__*/_react.default.createElement(_badge.default, {
        status: status,
        top: 10,
        bottom: 0
      })), myStake && !myStake.isZero() ? /*#__PURE__*/_react.default.createElement(_infoBlock.default, {
        address: address,
        copyAddress: copyAddress,
        name: name,
        value2: (0, _formatValue.wrapNumber)(myActiveStake) + " VLX",
        value1: (0, _formatValue.formatStakeAmount)(myStake) + " VLX",
        titleInfo: 'Only 25% of active stake can be activated per epoch.',
        subtitle2: 'My active stake',
        subtitle1: 'My stake',
        link: true
      }) : /*#__PURE__*/_react.default.createElement(_infoBlock.default, {
        address: address,
        copyAddress: copyAddress,
        name: name,
        value1: apr,
        value2: (0, _formatValue.formatStakeAmount)(activeStake),
        subtitle1: 'ANNUAL PERCENTAGE RATE',
        subtitle2: "Total Stake"
      }), /*#__PURE__*/_react.default.createElement(_tabs.default, {
        stakingStore: stakingStore,
        validatorDetails: chosenValidator,
        onClickStake: goToStake,
        onClickStakeMore: goToStake,
        onClickRequest: onClickRequest,
        onClickWithdrawal: onPressWithdraw
      })));
    });
  }; //Request Withdraw End


  var RequestWithdraw = function RequestWithdraw(props) {
    var _React$useState31 = _react.default.useState({
      amountWithdraw: ''
    }),
        _React$useState32 = _slicedToArray(_React$useState31, 2),
        values = _React$useState32[0],
        setValues = _React$useState32[1];

    var _React$useState33 = _react.default.useState(false),
        _React$useState34 = _slicedToArray(_React$useState33, 2),
        showExitWithdraw = _React$useState34[0],
        setShowExitWithdraw = _React$useState34[1];

    var stakingStore = props.stakingStore;
    var details = stakingStore.getValidatorDetails();
    if (!details) return null;
    var myStake = details.myStake,
        availableWithdrawRequested = details.availableWithdrawRequested;
    var TOTAL_STAKE = details.totalAvailableForWithdrawRequestStake;
    var ADDRESS = details.address; //Request Withdraw Start

    var onPressRequestWithdraw = /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        var amountWithdraw, result, errMessage, msg;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!(!details || !details.availableWithdrawRequested)) {
                  _context5.next = 2;
                  break;
                }

                return _context5.abrupt("return");

              case 2:
                amountWithdraw = values.amountWithdraw;

                if (!(!amountWithdraw || (amountWithdraw || "").trim().length === 0)) {
                  _context5.next = 5;
                  break;
                }

                return _context5.abrupt("return");

              case 5:
                if (!(parseFloat(amountWithdraw) > parseFloat(TOTAL_STAKE))) {
                  _context5.next = 7;
                  break;
                }

                return _context5.abrupt("return");

              case 7:
                setRequestWithdrawInProgress(true);
                _context5.prev = 8;
                _context5.next = 11;
                return stakingStore.requestWithdraw(ADDRESS, amountWithdraw);

              case 11:
                result = _context5.sent;

                if (!result.error) {
                  _context5.next = 16;
                  break;
                }

                setRequestWithdrawInProgress(false);
                errMessage = result.description ? result.description : 'Oops. Something went wrong.';
                return _context5.abrupt("return", setWithdrawError(errMessage));

              case 16:
                _context5.next = 26;
                break;

              case 18:
                _context5.prev = 18;
                _context5.t0 = _context5["catch"](8);
                setRequestWithdrawInProgress(false);
                msg = 'Something went wrong. Please contact support. You can still use web interface for full staking support.';
                setWithdrawError(msg + '\n\n' + _context5.t0);
                setTimeout(function () {
                  setWithdrawError(null);
                }, 3000);
                console.error(_context5.t0);
                return _context5.abrupt("return");

              case 26:
                goToExitWithdraw();
                setShowSuccessWithdraw(true);
                setRequestWithdrawInProgress(false);
                setValues({
                  amountWithdraw: ''
                });

              case 30:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, null, [[8, 18]]);
      }));

      return function onPressRequestWithdraw() {
        return _ref5.apply(this, arguments);
      };
    }();

    var backToDetailsFrowWithdraw = function backToDetailsFrowWithdraw() {
      setShowRequestWithdraw(false);
      setShowDetails(true);
    };

    var goToExitWithdraw = function goToExitWithdraw() {
      setShowRequestWithdraw(false);
      setShowExitWithdraw(true);
    };

    var backToRequestWithdraw = function backToRequestWithdraw() {
      setShowExitWithdraw(false);
      setShowRequestWithdraw(true);
    };

    var goToDetailsFromExitWithdraw = function goToDetailsFromExitWithdraw() {
      setShowExitWithdraw(false);
      setShowDetails(true);
    };

    var handleChange = function handleChange(text) {
      setValues(_objectSpread(_objectSpread({}, values), {}, {
        amountWithdraw: text
      }));
    };

    var styleAlert = {
      position: "absolute",
      top: 0,
      right: 0,
      left: 0,
      zIndex: 99,
      padding: 10,
      borderRadius: 0
    };
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, showRequestWithdraw && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_loader.default, {
      show: requestWithdrawInProgress,
      text: 'Withdrawing in process...'
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "staking index-width-container",
      style: widthContainer
    }, withdrawError && /*#__PURE__*/_react.default.createElement(_Alert.default, {
      severity: "error",
      id: "error",
      style: styleAlert,
      onClose: function onClose() {
        setWithdrawError(null);
      }
    }, withdrawError), /*#__PURE__*/_react.default.createElement(_header.default, {
      onClickBack: backToDetailsFrowWithdraw
    }), /*#__PURE__*/_react.default.createElement(_input.default, {
      value: values.amountWithdraw,
      onChange: function onChange(text) {
        return handleChange(text);
      },
      maxValue: TOTAL_STAKE,
      maxValueText: 'Your total stake'
    }), /*#__PURE__*/_react.default.createElement(_buttonBlock.default, {
      text: "WITHDRAW",
      onClickWithdrawal: onPressRequestWithdraw
    }))), showExitWithdraw && /*#__PURE__*/_react.default.createElement("div", {
      className: "staking index-width-container",
      style: widthContainer
    }, /*#__PURE__*/_react.default.createElement(_header.default, {
      onClickBack: backToRequestWithdraw
    }), /*#__PURE__*/_react.default.createElement(_enterance.default, {
      exitValidatorImg: true,
      title: "Withdrawal request has been submitted successfully",
      subtitle: "It will start cooling down from the next epoch. Please navigate the withdrawals tab to monitor the progress."
    }), /*#__PURE__*/_react.default.createElement(_buttonBlock.default, {
      text: "Ok",
      onClickNext: goToDetailsFromExitWithdraw
    })));
  };

  var Loading = function Loading() {
    return /*#__PURE__*/_react.default.createElement(_Box.default, {
      sx: styleSpinner
    }, /*#__PURE__*/_react.default.createElement(_CircularProgress.default, {
      color: "inherit"
    }));
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "staking index-width-container",
    style: widthContainer
  }, loading ? /*#__PURE__*/_react.default.createElement(Loading, null) : /*#__PURE__*/_react.default.createElement(_Box.default, {
    sx: style,
    className: !showStakePage.show ? "index-style-box" : "style-container"
  }, /*#__PURE__*/_react.default.createElement(StakePage, null), stakingStore.openedValidatorAddress && showDetails && /*#__PURE__*/_react.default.createElement(DetailsValidator, {
    details: showStakePage
  }), stakingStore.openedValidatorAddress && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, showRequestWithdraw && /*#__PURE__*/_react.default.createElement(RequestWithdraw, {
    stakingStore: stakingStore
  }), /*#__PURE__*/_react.default.createElement(_stake.default, {
    stakingStore: stakingStore,
    setShowStakeMore: setShowStakeMore,
    setShowDetails: setShowDetails,
    showStakeMore: showStakeMore
  })), showSuccessWithdraw && /*#__PURE__*/_react.default.createElement("div", {
    className: "staking index-width-container",
    style: widthContainer
  }, /*#__PURE__*/_react.default.createElement(_enterance.default, {
    exitValidatorImg: true,
    title: "Withdrawal has been submitted successfully",
    subtitle: "It make take a few minutes to appear on your balance."
  }), /*#__PURE__*/_react.default.createElement(_buttonBlock.default, {
    text: "Ok",
    onClickNext: goToDetailsFromSuccessWithdraw
  }))));
};

module.exports = StakingPage;