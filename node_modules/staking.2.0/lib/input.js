"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _Input = _interopRequireDefault(require("@mui/material/Input"));

var _inputAmount = _interopRequireDefault(require("./inputAmount"));

var _InputAdornment = _interopRequireDefault(require("@mui/material/InputAdornment"));

var _FormHelperText = _interopRequireDefault(require("@mui/material/FormHelperText"));

var _FormControl = _interopRequireDefault(require("@mui/material/FormControl"));

var _formatValue = require("./format-value");

var _Sort = _interopRequireDefault(require("@mui/icons-material/Sort"));

var _Button = _interopRequireDefault(require("@mui/material/Button"));

var _velasBlue = _interopRequireDefault(require("./images/velas-blue"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var InputValue = function InputValue(props) {
  var maxValue = props.maxValue,
      type = props.type;
  var max_value = (0, _formatValue.formatStakeAmount)(maxValue || null);
  var styleh3 = {
    color: '#fff',
    fontSize: 18,
    marginBlock: 10,
    textAlign: 'left'
  };
  var inputStyle = {
    color: '#fff',
    backgroundColor: '#292B52',
    paddingRight: 10,
    paddingBlock: 5,
    paddingLeft: 5
  };
  var closeBtn = {
    justifyContent: 'center',
    alignItems: 'center',
    display: 'flex',
    color: "#fff",
    fontSize: 12
  };
  return /*#__PURE__*/React.createElement("div", null, props.search ? /*#__PURE__*/React.createElement(_FormControl.default, {
    fullWidth: true,
    variant: "standard",
    style: {
      flexDirection: "inherit"
    }
  }, /*#__PURE__*/React.createElement(_Input.default, {
    onChange: props.onChange,
    placeholder: props.placeholder,
    style: props.style || inputStyle,
    className: "input-field",
    value: props.value,
    type: props.type,
    disableUnderline: props.disableUnderline,
    autoFocus: true,
    InputProps: {
      endAdornment: /*#__PURE__*/React.createElement(_InputAdornment.default, {
        position: "start"
      }, /*#__PURE__*/React.createElement(_Sort.default, null))
    }
  }), /*#__PURE__*/React.createElement(_Button.default, {
    size: "small",
    style: closeBtn,
    onClick: props.onClose
  }, "Cancel")) : /*#__PURE__*/React.createElement(_FormControl.default, {
    fullWidth: true,
    sx: {
      mt: 1
    },
    variant: "standard"
  }, /*#__PURE__*/React.createElement("h3", {
    style: styleh3,
    className: "input-styleh3"
  }, "Enter Amount"), /*#__PURE__*/React.createElement(_inputAmount.default, {
    id: "filled-adornment-amount",
    type: props.type || "text",
    value: props.value,
    onChangeText: props.onChange,
    placeholder: "0.00",
    style: {
      color: '#fff',
      backgroundColor: '#292B52',
      paddingRight: 10,
      paddingBlock: 5,
      paddingLeft: 5
    },
    className: "input-field",
    endAdornment: /*#__PURE__*/React.createElement(_InputAdornment.default, {
      position: "end"
    }, /*#__PURE__*/React.createElement(_velasBlue.default, {
      height: "15"
    }), /*#__PURE__*/React.createElement("div", {
      style: {
        color: '#fff',
        marginLeft: 5
      },
      className: "input-color-coin"
    }, "VLX"))
  }), /*#__PURE__*/React.createElement(_FormHelperText.default, {
    id: "standard-weight-helper-text",
    style: {
      color: '#fff'
    },
    className: "input-subtitle"
  }, props.maxValueText || 'Available for staking', ": ", max_value, " VLX")));
};

var _default = InputValue;
exports.default = _default;