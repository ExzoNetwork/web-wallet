"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _formatValue = require("./format-value");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Actions = function Actions(props) {
  var stakingStore = props.stakingStore,
      amountToConvert = props.amountToConvert;
  if (stakingStore.isRefreshing) return null;
  var details = stakingStore.getValidatorDetails();
  var ADDRESS = details ? details.address : '...';
  var swapAmount = stakingStore.getSwapAmountByStakeAmount(amountToConvert);
  var amount = (0, _formatValue.formatStakeAmount)(swapAmount || '0');
  var styleh3 = styles.styleh3,
      flex = styles.flex,
      styleNumber = styles.styleNumber,
      textStyle = styles.textStyle,
      styleAddress = styles.styleAddress,
      styleNumberSm = styles.styleNumberSm;
  return /*#__PURE__*/React.createElement("div", {
    style: {
      marginInline: 15
    }
  }, /*#__PURE__*/React.createElement("h3", {
    style: styleh3,
    className: "actions-styleh3"
  }, "These actions will be made"), !swapAmount || swapAmount.isZero() ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: flex,
    className: "actions-flex"
  }, /*#__PURE__*/React.createElement("div", {
    style: styleNumberSm,
    className: "actions-style-number"
  }, "1"), /*#__PURE__*/React.createElement("div", {
    style: textStyle,
    className: "actions-text-style"
  }, "Create Stake Account")), /*#__PURE__*/React.createElement("div", {
    style: flex,
    className: "actions-flex"
  }, /*#__PURE__*/React.createElement("div", {
    style: styleNumber,
    className: "actions-style-number"
  }, "2"), /*#__PURE__*/React.createElement("div", {
    style: textStyle,
    className: "actions-text-style"
  }, "Stake to Validator - ", /*#__PURE__*/React.createElement("div", {
    style: styleAddress,
    className: "actions-style-address"
  }, ADDRESS.substr(0, 30)), /*#__PURE__*/React.createElement("div", {
    style: styleAddress,
    className: "actions-style-address"
  }, ADDRESS.substr(30))))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    style: flex,
    className: "actions-styleh3"
  }, /*#__PURE__*/React.createElement("div", {
    style: styleNumber,
    className: "actions-style-number"
  }, "1"), /*#__PURE__*/React.createElement("div", {
    style: textStyle,
    className: "actions-text-style"
  }, "Convert ", amount, " VLX to VLX Native")), /*#__PURE__*/React.createElement("div", {
    style: flex,
    className: "actions-flex"
  }, /*#__PURE__*/React.createElement("div", {
    style: styleNumber,
    className: "actions-style-number"
  }, "2"), /*#__PURE__*/React.createElement("div", {
    style: textStyle,
    className: "actions-text-style"
  }, "Create Stake Account")), /*#__PURE__*/React.createElement("div", {
    style: flex,
    className: "actions-flex"
  }, /*#__PURE__*/React.createElement("div", {
    style: styleNumber,
    className: "actions-style-number"
  }, "3"), /*#__PURE__*/React.createElement("div", {
    style: textStyle,
    className: "actions-text-style"
  }, "Stake to Validator - ", /*#__PURE__*/React.createElement("div", {
    style: styleAddress,
    className: "actions-style-address"
  }, ADDRESS.substr(0, 30)), /*#__PURE__*/React.createElement("div", {
    style: styleAddress,
    className: "actions-style-address"
  }, ADDRESS.substr(30))))));
};

var styles = {
  styleh3: {
    color: '#fff',
    fontSize: 18,
    marginBlock: 15,
    textAlign: 'left'
  },
  styleNumber: {
    backgroundColor: '#ffffff40',
    border: '0.5px solid #fff',
    borderRadius: 100,
    height: 25,
    width: 25,
    fontSize: 14,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    position: "absolute",
    top: 0
  },
  styleNumberSm: {
    backgroundColor: '#ffffff40',
    border: '0.5px solid #fff',
    borderRadius: 100,
    height: 25,
    width: 25,
    fontSize: 14,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    position: "absolute",
    top: -5
  },
  textStyle: {
    fontSize: 14,
    alignItems: 'center',
    display: 'block',
    textAlign: 'left',
    paddingInline: 50
  },
  flex: {
    position: "relative",
    marginBlock: 50
  },
  styleAddress: {
    color: "#FFA607",
    marginTop: 3
  }
};
var _default = Actions;
exports.default = _default;